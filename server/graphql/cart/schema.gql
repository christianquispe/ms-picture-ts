type Query {
  getTest(input: InputGetTest!): Test
  allCart(paginated: Paginated, filter: FilterCart): PaginatedCart
}

type Mutation {
  addToCart(input: InputAddToCart!): CartItem
}

input Paginated {
  page: Int
  perPage: Int
  sortField: String
  sortOrder: String
}

input FilterCart {
  q: String
  ids: [ID]
}

input InputGetTest {
  test: String
}

input InputAddToCart {
  type: String!
  productId: ID!
  quantity: Int
}

type CartItem {
  type: String
  productId: String
  quantity: Int
  productSummary: ProductSummary
  createdAt: String
  updatedAt: String
}

type ProductSummary {
  _id: ID
  name: String
  description: String
  status: String
  price: Int
  img: String
  simbol: String
  createdAt: String
  updatedAt: String
}

type Test {
  test: String
}

type PaginatedCart {
  pageInfo: PageInfo
  cart: [CartItem]
}

type PageInfo {
  total: Int
  currentPage: Int
  perPage: Int
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}